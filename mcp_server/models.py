# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T04:14:42+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import List, Optional

from pydantic import BaseModel, Field, RootModel


class AdvertisingBranchModel(BaseModel):
    Address1: Optional[str] = Field(None, description='Branch address line 1.')
    Address2: Optional[str] = Field(None, description='Branch address line 2.')
    Address3: Optional[str] = Field(None, description='Branch address line 3.')
    Address4: Optional[str] = Field(None, description='Branch address line 4.')
    CompanyName: Optional[str] = Field(
        None,
        description='The relevant company name, if not the one specified on the branch then the one on company.',
    )
    County: Optional[str] = Field(None, description='County')
    EMailAddress: Optional[str] = Field(None, description='Branch email address.')
    ETag: Optional[str] = Field(
        None, description='A unique identifier defining the object and change revision.'
    )
    FaxPhone: Optional[str] = Field(None, description='Branch fax phone number.')
    LandPhone: Optional[str] = Field(None, description='Branch land phone number.')
    Name: Optional[str] = Field(None, description='The branch name.')
    OID: Optional[str] = Field(None, description='The unique Object ID (OID).')
    Postcode: Optional[str] = Field(None, description='Branch address postcode.')
    WebAddress: Optional[str] = Field(None, description='Branch web address.')


class AdvertisingBranchModelResults(BaseModel):
    Count: Optional[int] = Field(
        None, description='The total number of results available for all pages'
    )
    Data: Optional[List[AdvertisingBranchModel]] = Field(
        None, description='The resulting data returned from the paged query range'
    )


class BaseHypermediaLink(BaseModel):
    Href: Optional[str] = Field(None, description='The hypermedia href')
    Method: Optional[str] = Field(None, description='The http method type')
    Relationship: Optional[str] = Field(
        None, description='The hypermedia link relationship to current result object.'
    )


class RemindBefore(Enum):
    Min = 'Min'
    Min2 = 'Min2'
    Min5 = 'Min5'
    Min10 = 'Min10'
    Min15 = 'Min15'
    Min30 = 'Min30'
    Min45 = 'Min45'
    Hour = 'Hour'
    Hour2 = 'Hour2'
    Hour3 = 'Hour3'
    Hour6 = 'Hour6'
    Hour12 = 'Hour12'
    Day = 'Day'
    Day2 = 'Day2'
    Day3 = 'Day3'
    Week = 'Week'
    NoReminder = 'NoReminder'


class SystemType(Enum):
    Viewing = 'Viewing'
    ViewAndValue = 'ViewAndValue'
    OpeningInspection = 'OpeningInspection'
    InterimInspection = 'InterimInspection'
    ClosingInspection = 'ClosingInspection'
    SalesAppraisal = 'SalesAppraisal'
    Custom = 'Custom'


class DiaryAppointmentTypeModel(BaseModel):
    ETag: Optional[str] = Field(
        None, description='A unique identifier defining the object and change revision.'
    )
    Name: Optional[str] = Field(None, description='The appointment type name.')
    OID: Optional[str] = Field(None, description='The unique Object ID (OID).')
    SystemType_1: Optional[SystemType] = Field(
        None, alias='SystemType', description='The appointment system type.'
    )


class DiaryAppointmentTypeModelResults(BaseModel):
    Count: Optional[int] = Field(
        None, description='The total number of results available for all pages'
    )
    Data: Optional[List[DiaryAppointmentTypeModel]] = Field(
        None, description='The resulting data returned from the paged query range'
    )


class DiaryBookingModel(BaseModel):
    End: Optional[datetime] = Field(None, description='The end time of the booking')
    StaffID: Optional[str] = Field(
        None, description='The unique ID of the staff member this booking is with'
    )
    StaffName: Optional[str] = Field(
        None, description='The name of the staff member this booking is with'
    )
    Start: Optional[datetime] = Field(None, description='The start time of the booking')


class DiaryGuestDetails(BaseModel):
    AllowMarketingCorrespondence: Optional[bool] = Field(
        None, description='Marketing Correspondence Preferences'
    )
    EmailAddress: Optional[str] = Field(None, description='Email address')
    Forename: Optional[str] = Field(None, description='Forename')
    MobilePhone: Optional[str] = Field(None, description='Mobile phone')
    OID: Optional[str] = Field(
        None, description='The unique identifier of a user, only submit this is known'
    )
    Surname: Optional[str] = Field(None, description='Surname')


class FeedbackSubmissionModel(BaseModel):
    AppointmentID: Optional[str] = Field(
        None, description='Appointment to submit feedback to:-'
    )
    Feedback: Optional[str] = Field(None, description='Feedback to submit:-')
    PropertyID: Optional[str] = Field(
        None, description='Property to submit feedback to:-'
    )


class GuestDiaryParametersModel(BaseModel):
    ContactMobile: Optional[str] = Field(None, description='Guest Mobile Phone')
    EmailAddress: Optional[str] = Field(None, description='Guest Email Address')
    Forename: Optional[str] = Field(None, description='Guest Forename')
    OID: Optional[str] = Field(None, description='Guest OID')
    Surname: Optional[str] = Field(None, description='Guest Surname')


class GuestDiaryParametersResultsModel(BaseModel):
    Count: Optional[int] = Field(None, description='Results count:-')
    Data: Optional[List[GuestDiaryParametersModel]] = Field(
        None, description='Results data:-'
    )
    Links: Optional[List[BaseHypermediaLink]] = Field(
        None, description='Results links:-'
    )


class LinkedLandlordModel(BaseModel):
    ETag: Optional[str] = Field(None, description='ETag')
    Email: Optional[str] = Field(None, description="Landlord's email address")
    Forename: Optional[str] = Field(None, description='Forename')
    OID: Optional[str] = Field(None, description='OID')
    PhoneNumber: Optional[str] = Field(None, description="Landlord's phone number")
    Surname: Optional[str] = Field(None, description='Surname')
    Title: Optional[str] = Field(None, description='Title')


class LinkedTenantModel(BaseModel):
    ETag: Optional[str] = Field(None, description='ETag')
    Email: Optional[str] = Field(None, description="Tenant's email address")
    Forename: Optional[str] = Field(None, description='Forename')
    OID: Optional[str] = Field(None, description='OID')
    PhoneNumber: Optional[str] = Field(None, description="Tenant's phone number")
    Surname: Optional[str] = Field(None, description='Surname')
    Title: Optional[str] = Field(None, description='Title')


class V3DiaryShortNameAllocationsGetResponse(RootModel[List[DiaryBookingModel]]):
    root: List[DiaryBookingModel]


class PropertyIdentifier(RootModel[List[str]]):
    root: List[str]


class AppointmentTypesToSearch(RootModel[List[str]]):
    root: List[str]


class DiaryAppointmentDetails(BaseModel):
    AllocationDetails: Optional[DiaryBookingModel] = None
    AppointmentType: Optional[str] = Field(None, description='The Appointment Type ID')
    ExtraComments: Optional[str] = Field(
        None, description='Additional appointment comments'
    )
    Guests: Optional[List[DiaryGuestDetails]] = Field(
        None,
        description='A collection of guests linked to the appointment. If none leave empty',
    )
    Subject: Optional[str] = Field(None, description='The subject of the appointment')


class LatestTenancyModel(BaseModel):
    AccessArrangements: Optional[str] = Field(None, description='Access Arrangements')
    AccessMobile1: Optional[str] = Field(None, description='Arrange access Mobile 1')
    AccessMobile2: Optional[str] = Field(None, description='Arrange access Mobile 2')
    AccessMobile3: Optional[str] = Field(None, description='Arrange access Mobile 3')
    AccessName1: Optional[str] = Field(
        None, description='Arrange access contact name 1'
    )
    AccessName2: Optional[str] = Field(
        None, description='Arrange access contact name 2'
    )
    AccessName3: Optional[str] = Field(
        None, description='Arrange access contact name 3'
    )
    ETag: Optional[str] = Field(None, description='ETag')
    EndDate: Optional[datetime] = Field(None, description='The end date of the Tenancy')
    FixedDate: Optional[datetime] = Field(
        None, description='The fixed date of the Tenancy'
    )
    GlobalReference: Optional[str] = Field(
        None, description='The unique global reference of the Tenancy'
    )
    IsTenancyEnded: Optional[bool] = Field(None, description='Has the Tenancy ended?')
    IsTenancyProposed: Optional[bool] = Field(
        None, description='Is the tenancy Proposed?'
    )
    IsTenancySigned: Optional[bool] = Field(None, description='Is the tenancy signed?')
    LinkedTenants: Optional[List[LinkedTenantModel]] = Field(
        None, description='A collection of tenants linked to the tenancy:-'
    )
    OID: Optional[str] = Field(None, description='OID')
    StartDate: Optional[datetime] = Field(
        None, description='The start date of the Tenancy'
    )


class LinkedPropertiesModel(BaseModel):
    Address1: Optional[str] = Field(None, description='Address 1')
    Address2: Optional[str] = Field(None, description='Address2')
    Address3: Optional[str] = Field(None, description='Address 3')
    Address4: Optional[str] = Field(None, description='Address 4')
    AddressFlatRoomNumber: Optional[str] = Field(
        None, description='Address Flat Room Number'
    )
    AddressNumber: Optional[str] = Field(None, description='Address Number')
    ETag: Optional[str] = Field(None, description='ETag')
    LatestTenancy: Optional[LatestTenancyModel] = None
    MainLandlord: Optional[LinkedLandlordModel] = None
    OID: Optional[str] = Field(None, description='OID')
    Postcode: Optional[str] = Field(None, description='Postcode')


class DiaryAppointmentModel(BaseModel):
    AppointmentType: Optional[str] = Field(
        None, description='The diary appointment type.'
    )
    Cancelled: Optional[bool] = Field(
        None, description='Whether the appointment has been cancelled.'
    )
    Comment: Optional[str] = Field(None, description='The appointment comments text.')
    CreatedAt: Optional[datetime] = Field(
        None, description='The date/time this appointment was created.'
    )
    CreatedBy: Optional[str] = Field(
        None, description='The staff member that created this appointment.'
    )
    ETag: Optional[str] = Field(
        None, description='A unique identifier defining the object and change revision.'
    )
    End: Optional[datetime] = Field(
        None, description='The end date/time of this appointment.'
    )
    LinkedProperties: Optional[List[LinkedPropertiesModel]] = Field(
        None, description='A collection of properties linked to the appointment:-'
    )
    NextRecurringDate: Optional[datetime] = Field(
        None, description='Date appointment next repeats:-'
    )
    OID: Optional[str] = Field(None, description='The unique Object ID (OID).')
    Recurrence: Optional[int] = Field(
        None, description='The reccurrence interval for the appointment:-'
    )
    RecurrenceType: Optional[str] = Field(None, description='The type of recurrence:-')
    RemindAt: Optional[datetime] = Field(
        None,
        description='The date/time to remind the staff member of this appointment.',
    )
    RemindBefore_1: Optional[RemindBefore] = Field(
        None,
        alias='RemindBefore',
        description="The number of minutes before the appointment start date/time to remind the staff member. -1 means don't remind.",
    )
    Staff: Optional[str] = Field(
        None, description='The staff member holding this appointment.'
    )
    Start: Optional[datetime] = Field(
        None, description='The start date/time of this appointment.'
    )
    Subject: Optional[str] = Field(None, description='The appointment subject text.')


class DiaryAppointmentModelResults(BaseModel):
    Count: Optional[int] = Field(
        None, description='The total number of results available for all pages'
    )
    Data: Optional[List[DiaryAppointmentModel]] = Field(
        None, description='The resulting data returned from the paged query range'
    )
